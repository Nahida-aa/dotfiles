{
	// Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Create Next.js Page with Suspense and Error Handling": {
		"prefix": "nextpagefull",
		"body": [
			"import { Suspense } from 'react';",
			"import { LoadingS } from '~/components/ui/loading/Loading';",
			"",
			"export default async function ${1:Page} ({",
			"  params,",
			"  searchParams,",
			"}: {",
			"  params: Promise<{ slug: string }>,",
			"  searchParams: Promise<{ [key: string]: string | string[] | undefined }>",
			"}) {",
			"  const { slug } = await params",
			"  const { page = '1', sort = 'asc', query = '' } = await searchParams",
			"  return <Suspense fallback={<LoadingS />}>",
			"    <h1>${1:Page}</h1>",
			"    <p>This is the ${1:Page} page.</p>",
			"  </Suspense>",
			"}",
		],
		"description": "Create a new Next.js page component with Suspense and error handling"
	},
	// Next Layout:
	"Create Next.js Layout": {
		"prefix": "nextlayout",
		"body": [
			"export default async function Layout({ ",
			"  children,",
			"  params",
			"}: {",
			"  children: React.ReactNode,",
			"  params: Promise<{ slug: string }>",
			"}) {",
			"  const { slug } = await params",
			"  return <section>",
			"    {children}",
			"  </section>",
			"}",
		],
		"description": "Create a new Next.js layout component"
	},
	// Next Context:
	"Create Next.js Context": {
		"prefix": "nextcontext",
		"body": [
			"import { createContext, useContext, useState } from 'react';",
			"",
			"interface ContextType extends ${4:ContextType} {}",

			"export const ${1:Context} = createContext<{",
			"  state: ContextType,",
			"  setState: (state: ContextType | null) => void;",
			"} | undefined>(undefined);",
			"",
			"export const ${1:Context}Provider = ({ children }: { children: React.ReactNode }) => {",
			"  const [state, setState] = useState<ContextType | null>(null);",
			"  return <${1:Context}.Provider value={{ state, setState }}>{children}</${1:Context}.Provider>;",
			"};",
			"",
			"export const use${1:Context} = () => {",
			"  const context = useContext(${1:Context});",
			"  if (!context) {",
			"    throw new Error('use${1:Context} must be used within a ${1:Context}Provider');",
			"  }",
			"  return context;",
			"};",
		],
		"description": "Create a new Next.js context"
	},
}