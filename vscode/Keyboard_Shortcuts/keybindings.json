// 将键绑定放在此文件中以覆盖默认值auto[]
[
    {
        "key": "shift+escape",
        "command": "workbench.action.closePanel"
    },
    {
        "key": "ctrl+win+r",
        "command": "workbench.action.reloadWindow",
        "when": "isDevelopment"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.reloadWindow",
        "when": "isDevelopment"
    },
    {
        "key": "alt+win+oem_minus",
        "command": "glassit.increase"
    },
    {
        "key": "ctrl+alt+z",
        "command": "-glassit.increase"
    },
    {
        "key": "alt+win+oem_plus",
        "command": "glassit.decrease"
    },
    {
        "key": "ctrl+alt+c",
        "command": "-glassit.decrease"
    },
    {
        "key": "alt+s",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
    },
    {
        "key": "alt+r",
        "command": "-toggleSearchEditorRegex",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+r",
        "command": "-toggleFindRegex",
        "when": "editorFocus"
    },
    {
        "key": "alt+r",
        "command": "-toggleSearchRegex",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+r",
        "command": "-workbench.action.terminal.toggleFindRegex",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+f9",
        "command": "-workbench.action.debug.run",
        "when": "debuggersAvailable && !inDebugMode && !terminalFocus"
    },
    {
        "key": "ctrl+f5",
        "command": "workbench.action.debug.run",
        "when": "debuggersAvailable && debugState != 'initializing'"
    },
    {
        "key": "ctrl+f5",
        "command": "-workbench.action.debug.run",
        "when": "debuggersAvailable && debugState != 'initializing'"
    },
    {
        "key": "alt+r",
        "command": "python.execInTerminal-icon",
        "when": "editorLangId == 'python'"
    },
    {
        "key": "alt+oem_2",
        "command": "github.copilot.acceptCursorPanelSolution",
        "when": "github.copilot.activated && github.copilot.panelVisible"
    },
    {
        "key": "ctrl+oem_2",
        "command": "-github.copilot.acceptCursorPanelSolution",
        "when": "github.copilot.activated && github.copilot.panelVisible"
    },
    {
        "key": "ctrl+shift+alt+u",
        "command": "better-markdown-latex-shortcuts.singleCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+u",
        "command": "-better-markdown-latex-shortcuts.singleCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+enter",
        "command": "-jupyter.runcurrentcelladvance",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"
    },
    {
        "key": "shift+enter",
        "command": "-jupyter.execSelectionInteractive",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.ownsSelection && !findInputFocussed && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "shift+enter",
        "command": "-notebook.cell.executeAndSelectBelow",
        "when": "notebookCellListFocused && !interactiveEditorFocused && notebookCellType == 'code' || editorTextFocus && inputFocus && notebookEditorFocused && !interactiveEditorFocused"
    },
    {
        "key": "shift+enter",
        "command": "-notebook.cell.executeAndSelectBelow",
        "when": "notebookCellListFocused && !inlineChatFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
    },
    {
        "key": "shift+enter",
        "command": "-notebook.cell.executeAndSelectBelow",
        "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
    },
    {
        "key": "alt+r",
        "command": "notebook.cell.execute",
        "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "-notebook.cell.execute",
        "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
    },
    {
        "key": "shift+enter",
        "command": "-interactive.execute",
        "when": "!notebookKernel && activeEditor == 'workbench.editor.interactive' || activeEditor == 'workbench.editor.interactive' && notebookKernel =~ /^ms-toolsai.jupyter\\//"
    },
    {
        "key": "shift+enter",
        "command": "-markdown.extension.onShiftEnterKey",
        "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/ || editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && config.editor.acceptSuggestionOnEnter == 'off' && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    },
    {
        "key": "shift+enter",
        "command": "-python.execSelectionInTerminal",
        "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "shift+enter",
        "command": "editor.action.insertLineAfter",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+enter",
        "command": "-editor.action.insertLineAfter",
        "when": "editorTextFocus && !editorReadonly && !notebookEditorFocused"
    },
    {
        "key": "alt+r",
        "command": "notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && !inlineChatFocused && notebookCellType == 'markup'"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "-notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && !inlineChatFocused && notebookCellType == 'markup'"
    },
    {
        "key": "ctrl+oem_3",
        "command": "-workbench.action.selectTheme"
    },
    {
        "key": "f1",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "ctrl+shift+numpad_subtract",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "ctrl+shift+a",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "ctrl+shift+oem_comma",
        "command": "workbench.action.openSettingsJson"
    },
    {
        "key": "ctrl+shift+n",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "ctrl+n",
        "command": "-workbench.action.showAllSymbols"
    },
    {
        "key": "ctrl+w",
        "command": "-extension.vim_ctrl+w",
        "when": "editorTextFocus && vim.active && vim.use<C-w> && !inDebugRepl"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-editor.action.insertLineAfter",
        "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+b",
        "command": "-editor.action.goToDeclaration",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+a",
        "command": "C_Cpp.RunCodeAnalysisOnActiveFile"
    },
    {
        "key": "shift shift",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "alt+r",
        "command": "markdown.showPreviewToSide",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+win+t",
        "command": "-extension.cursorTip",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+h",
        "command": "rest-client.history",
        "when": "editorLangId == 'rest'"
    },
    {
        "key": "ctrl+alt+h",
        "command": "-rest-client.history"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-markdown-preview-enhanced.runAllCodeChunks",
        "when": "editorLangId == 'markdown'"
  },
  {
      "key": "ctrl+v",
      "command": "workbench.action.terminal.paste",
      "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
      "key": "ctrl+c",
      "command": "workbench.action.terminal.copySelection",
      "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused"
  }
  ]